
#pragma once

#include <cstdio>
#include <GameLibrary/Exception/IllegalArgumentException.hpp>
#include <GameLibrary/Exception/Utilities/DictionaryKeyNotFoundException.hpp>

namespace fgl
{
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::ValueProxy(ValueProxy&& valueProxy)
		: key(valueProxy.key),
		dictionary(valueProxy.dictionary)
	{
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::ValueProxy(const KEY_TYPE& key, BasicDictionary<KEY_TYPE, VALUE_TYPE>& dictionary)
		: key(key),
		dictionary(dictionary)
	{
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(VALUE_TYPE& value)
	{
		return dictionary.set(key, value);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(VALUE_TYPE&& value)
	{
		return dictionary.set(key, value);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(const VALUE_TYPE& value)
	{
		return dictionary.set(key, value);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(const VALUE_TYPE&& value)
	{
		return dictionary.set(key, value);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator VALUE_TYPE&()
	{
		try
		{
			return dictionary.get(key);
		}
		catch(const DictionaryKeyNotFoundException&)
		{
			return dictionary.set(key, VALUE_TYPE());
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary()
	{
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(const ArrayList<KEY_TYPE>& keys, const ArrayList<VALUE_TYPE>& values)
	{
		size_t keys_size = keys.size();
		size_t values_size = values.size();
		if(keys_size != values_size)
		{
			throw IllegalArgumentException("values", "size of values does not match size of keys");
		}
		contents.resize(keys_size);
		for(size_t i=0; i<keys_size; i++)
		{
			std::pair<KEY_TYPE, VALUE_TYPE>& pair = contents[i];
			pair.first = keys[i];
			pair.second = keys[i];
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(const ArrayList<std::pair<KEY_TYPE, VALUE_TYPE> >& contents)
		: contents(contents)
	{
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(ArrayList<std::pair<KEY_TYPE, VALUE_TYPE> >&& contents)
		: contents(contents)
	{
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::~BasicDictionary()
	{
		//
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::begin()
	{
		return contents.begin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::begin() const
	{
		return contents.begin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::cbegin() const
	{
		return contents.cbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::end()
	{
		return contents.end();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::end() const
	{
		return contents.end();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::cend() const
	{
		return contents.cend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rbegin()
	{
		return contents.rbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rbegin() const
	{
		return contents.rbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::crbegin() const
	{
		return contents.crbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rend()
	{
		return contents.rend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rend() const
	{
		return contents.rend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::crend() const
	{
		return contents.crend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	bool BasicDictionary<KEY_TYPE, VALUE_TYPE>::has(const KEY_TYPE& key) const
	{
		return indexOfKey(key) != (size_t)-1;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, VALUE_TYPE& value)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			index = contents.size();
			contents.add(std::pair<KEY_TYPE, VALUE_TYPE>(key, value));
		}
		else
		{
			contents[index].second = value;
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, VALUE_TYPE&& value)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			index = contents.size();
			contents.add(std::pair<KEY_TYPE, VALUE_TYPE>(key, value));
		}
		else
		{
			contents[index].second = value;
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, const VALUE_TYPE& value)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			index = contents.size();
			contents.add(std::pair<KEY_TYPE, VALUE_TYPE>(key, value));
		}
		else
		{
			contents[index].second = value;
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, const VALUE_TYPE&& value)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			index = contents.size();
			contents.add(std::pair<KEY_TYPE, VALUE_TYPE>(key, value));
		}
		else
		{
			contents[index].second = value;
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			throw DictionaryKeyNotFoundException(fgl::stringify<KEY_TYPE>(key));
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key) const
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			throw DictionaryKeyNotFoundException(fgl::stringify<KEY_TYPE>(key));
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key, VALUE_TYPE& defaultValue)
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			return defaultValue;
		}
		return contents[index].second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key, const VALUE_TYPE& defaultValue) const
	{
		size_t index = indexOfKey(key);
		if(index==(size_t)-1)
		{
			return defaultValue;
		}
		return contents[index].second;
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::remove(const KEY_TYPE& key)
	{
		size_t index = indexOfKey(key);
		if(index!=(size_t)-1)
		{
			contents.remove(index);
		}
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy BasicDictionary<KEY_TYPE, VALUE_TYPE>::operator[](const KEY_TYPE& key)
	{
		return ValueProxy(key, *this);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	ArrayList<KEY_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::getKeys() const
	{
		ArrayList<KEY_TYPE> keys;
		size_t contents_size = contents.size();
		keys.resize(contents_size);
		for(size_t i=0; i<contents_size; i++)
		{
			keys[i] = contents[i].first;
		}
		return keys;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	ArrayList<VALUE_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::getValues() const
	{
		ArrayList<KEY_TYPE> values;
		size_t contents_size = contents.size();
		values.resize(contents_size);
		for(size_t i=0; i<contents_size; i++)
		{
			values[i] = contents[i].first;
		}
		return values;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const ArrayList<std::pair<KEY_TYPE, VALUE_TYPE> >& BasicDictionary<KEY_TYPE, VALUE_TYPE>::getContents() const
	{
		return contents;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	size_t BasicDictionary<KEY_TYPE, VALUE_TYPE>::size() const
	{
		return contents.size();
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::clear()
	{
		contents.clear();
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::reserve(size_t size)
	{
		contents.reserve(size);
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	bool BasicDictionary<KEY_TYPE, VALUE_TYPE>::isEmpty() const
	{
		return contents.size()==0;
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::filter(const std::function<bool(const KEY_TYPE& key, const VALUE_TYPE& value)>& func) const
	{
		return BasicDictionary<KEY_TYPE, VALUE_TYPE>(contents.filter([&func](const KEY_TYPE& key, const VALUE_TYPE& value){
			return func(key, value);
		}));
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	String BasicDictionary<KEY_TYPE, VALUE_TYPE>::toString() const
	{
		String str = (String)"BasicDictionary<" + typeid(KEY_TYPE).name() + "," + typeid(VALUE_TYPE).name() + ">( ";
		size_t lastIndex = contents.size()-1;
		for(size_t contents_size=contents.size(), i=0; i<contents_size; i++)
		{
			const std::pair<KEY_TYPE, VALUE_TYPE>& pair = contents[i];
			str += "(" + fgl::stringify<KEY_TYPE>(pair.first) + ") => ";
			str += "(" + fgl::stringify<VALUE_TYPE>(pair.second) + ")";
			if(i!=lastIndex)
			{
				str += ", ";
			}
		}
		str += ")";
		return str;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	size_t BasicDictionary<KEY_TYPE, VALUE_TYPE>::indexOfKey(const KEY_TYPE& key) const
	{
		for(size_t contents_size=contents.size(), i=0; i<contents_size; i++)
		{
			if(contents[i].first == key)
			{
				return i;
			}
		}
		return (size_t)-1;
	}
}
