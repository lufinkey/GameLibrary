
#pragma once

#include <cstdio>
#include <GameLibrary/Exception/IllegalArgumentException.hpp>
#include <GameLibrary/Exception/Utilities/DictionaryKeyNotFoundException.hpp>

namespace fgl
{
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::ValueProxy(ValueProxy&& valueProxy)
		: key(valueProxy.key),
		dictionary(valueProxy.dictionary) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::ValueProxy(const KEY_TYPE& key, BasicDictionary<KEY_TYPE, VALUE_TYPE>& dictionary)
		: key(key),
		dictionary(dictionary) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(VALUE_TYPE& value) {
		return dictionary.set(key, value)->second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(VALUE_TYPE&& value) {
		return dictionary.set(key, value)->second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(const VALUE_TYPE& value) {
		return dictionary.set(key, value)->second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator=(const VALUE_TYPE&& value) {
		return dictionary.set(key, value)->second;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy::operator VALUE_TYPE&() {
		try {
			return dictionary.get(key);
		}
		catch(const DictionaryKeyNotFoundException&) {
			return dictionary.set(key, VALUE_TYPE());
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary() {
		//
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(std::initializer_list<std::pair<KEY_TYPE, VALUE_TYPE>> list)
		: contents(list) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(const ArrayList<KEY_TYPE>& keys, const ArrayList<VALUE_TYPE>& values) {
		size_t keys_size = keys.size();
		size_t values_size = values.size();
		if(keys_size != values_size) {
			throw IllegalArgumentException("values", "size of values does not match size of keys");
		}
		contents.reserve(keys_size);
		for(size_t i=0; i<keys_size; i++) {
			contents.add(std::pair<KEY_TYPE, VALUE_TYPE>(keys[i], values[i]));
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(const ArrayList<std::pair<KEY_TYPE, VALUE_TYPE> >& contents)
		: contents(contents.begin(), contents.end()) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(ArrayList<std::pair<KEY_TYPE, VALUE_TYPE> >&& contents)
		: contents(std::make_move_iterator(contents.begin()), std::make_move_iterator(contents.end())) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::BasicDictionary(const std::map<KEY_TYPE, VALUE_TYPE>& contents)
		: contents(contents) {
		//
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE>::~BasicDictionary() {
		//
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::begin() {
		return contents.begin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::begin() const {
		return contents.begin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::cbegin() const {
		return contents.cbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::end() {
		return contents.end();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::end() const {
		return contents.end();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::cend() const {
		return contents.cend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rbegin() {
		return contents.rbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rbegin() const {
		return contents.rbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::crbegin() const {
		return contents.crbegin();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rend() {
		return contents.rend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::rend() const {
		return contents.rend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::const_reverse_iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::crend() const {
		return contents.crend();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	bool BasicDictionary<KEY_TYPE, VALUE_TYPE>::has(const KEY_TYPE& key) const {
		return contents.find(key) != contents.end();
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, const VALUE_TYPE& value) {
		return contents.insert(std::make_pair( key, value )).first;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::iterator BasicDictionary<KEY_TYPE, VALUE_TYPE>::set(const KEY_TYPE& key, VALUE_TYPE&& value) {
		return contents.insert(std::make_pair( key, value )).first;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key) {
		try {
			return contents.at(key);
		}
		catch(const std::out_of_range& e) {
			throw DictionaryKeyNotFoundException(fgl::stringify<KEY_TYPE>(key));
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key) const {
		try {
			return contents.at(key);
		}
		catch(const std::out_of_range& e) {
			throw DictionaryKeyNotFoundException(fgl::stringify<KEY_TYPE>(key));
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key, VALUE_TYPE& defaultValue) {
		try {
			return contents.at(key);
		}
		catch(const std::out_of_range& e) {
			return defaultValue;
		}
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const VALUE_TYPE& BasicDictionary<KEY_TYPE, VALUE_TYPE>::get(const KEY_TYPE& key, const VALUE_TYPE& defaultValue) const {
		try {
			return contents.at(key);
		}
		catch(const std::out_of_range& e) {
			return defaultValue;
		}
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::remove(const KEY_TYPE& key) {
		contents.erase(key);
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	typename BasicDictionary<KEY_TYPE, VALUE_TYPE>::ValueProxy BasicDictionary<KEY_TYPE, VALUE_TYPE>::operator[](const KEY_TYPE& key) {
		return ValueProxy(key, *this);
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	ArrayList<KEY_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::getKeys() const {
		ArrayList<KEY_TYPE> keys;
		keys.reserve(contents.size());
		for(auto& pair : contents) {
			keys.add(pair.first);
		}
		return keys;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	ArrayList<VALUE_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::getValues() const {
		ArrayList<KEY_TYPE> values;
		values.reserve(contents.size());
		for(auto& pair : contents) {
			values.add(pair.second);
		}
		return values;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	std::map<KEY_TYPE, VALUE_TYPE>& BasicDictionary<KEY_TYPE, VALUE_TYPE>::getMap() {
		return contents;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	const std::map<KEY_TYPE, VALUE_TYPE>& BasicDictionary<KEY_TYPE, VALUE_TYPE>::getMap() const {
		return contents;
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	size_t BasicDictionary<KEY_TYPE, VALUE_TYPE>::size() const {
		return contents.size();
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::clear() {
		contents.clear();
	}
	
	template<typename KEY_TYPE, typename VALUE_TYPE>
	bool BasicDictionary<KEY_TYPE, VALUE_TYPE>::isEmpty() const {
		return contents.size()==0;
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::filter(const std::function<bool(const KEY_TYPE& key, const VALUE_TYPE& value)>& func) const {
		BasicDictionary<KEY_TYPE, VALUE_TYPE> newDict;
		auto& newMap = newDict.getMap();
		for(auto& pair : contents) {
			if(func(pair.first, pair.second)) {
				newMap.insert(std::make_pair(pair.first, pair.second));
			}
		}
		return newDict;
	}

	#ifdef __OBJC__
	template<typename KEY_TYPE, typename VALUE_TYPE>
	BasicDictionary<KEY_TYPE, VALUE_TYPE> BasicDictionary<KEY_TYPE, VALUE_TYPE>::filter(BOOL(^func)(const KEY_TYPE& key, const VALUE_TYPE& value)) const {
		BasicDictionary<KEY_TYPE, VALUE_TYPE> newDict;
		auto& newMap = newDict.getMap();
		for(auto& pair : contents) {
			if(func(pair.first, pair.second)) {
				newMap.insert(std::make_pair(pair.first, pair.second));
			}
		}
		return newDict;
	}
	#endif

	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::forEach(const std::function<void(const KEY_TYPE& key, VALUE_TYPE& value)>& func) {
		for(auto& pair : contents) {
			func(pair.first, pair.second);
		}
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::forEach(const std::function<void(const KEY_TYPE& key, const VALUE_TYPE& value)>& func) const {
		for(auto& pair : contents) {
			func(pair.first, pair.second);
		}
	}

	#ifdef __OBJC__
	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::forEach(void(^func)(const KEY_TYPE& key, VALUE_TYPE& value)) {
		for(auto& pair : contents) {
			func(pair.first, pair.second);
		}
	}

	template<typename KEY_TYPE, typename VALUE_TYPE>
	void BasicDictionary<KEY_TYPE, VALUE_TYPE>::forEach(void(^func)(const KEY_TYPE& key, const VALUE_TYPE& value)) const {
		for(auto& pair : contents) {
			func(pair.first, pair.second);
		}
	}
	#endif

	template<typename KEY_TYPE, typename VALUE_TYPE>
	String BasicDictionary<KEY_TYPE, VALUE_TYPE>::toString() const {
		String str = (String)"BasicDictionary<" + typeid(KEY_TYPE).name() + "," + typeid(VALUE_TYPE).name() + ">( ";
		for(auto it=begin(); it!=end(); it++) {
			auto& pair = *it;
			str += "(" + fgl::stringify<KEY_TYPE>(pair.first) + ") => ";
			str += "(" + fgl::stringify<VALUE_TYPE>(pair.second) + ")";
			if(it != std::prev(end())) {
				str += ", ";
			}
		}
		str += ")";
		return str;
	}
}
